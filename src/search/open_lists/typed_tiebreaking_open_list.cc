#include "typed_tiebreaking_open_list.h"

#include "open_list.h"

#include "../option_parser.h"
#include "../plugin.h"

#include "../utils/rng.h"
#include "../utils/memory.h"
#include "../utils/system.h"

#include <cassert>
#include <deque>
#include <map>
#include <utility>
#include <vector>
#include <iostream>

using namespace std;

template<class Entry>
TypedTiebreakingOpenList<Entry>::TypedTiebreakingOpenList(const Options &opts)
    : TieBreakingOpenList<Entry>(opts),
      type_evaluators(opts.get_list<ScalarEvaluator *>("type_evals")) {
}

template<class Entry>
void TypedTiebreakingOpenList<Entry>::do_insertion(
    EvaluationContext &eval_context, const Entry &entry) {
    Key key;
    key.reserve(this->evaluators.size());
    for (ScalarEvaluator *evaluator : this->evaluators)
        key.push_back(eval_context.get_heuristic_value_or_infinity(evaluator));
    Key type_key;
    type_key.reserve(type_evaluators.size());
    for (ScalarEvaluator *evaluator : type_evaluators)
        type_key.push_back(eval_context.get_heuristic_value_or_infinity(evaluator));
    auto &tbuckets = buckets[key];
    auto &tbucket = tbuckets[type_key];
    tbucket.push_back(entry);
    ++(this->size);
}

template<class Entry>
Entry TypedTiebreakingOpenList<Entry>::remove_min(vector<int> *key) {
    assert(this->size > 0);
    --(this->size);

    auto it = buckets.begin();  // sorted buckets
    assert(it != buckets.end());
    assert(!it->second.empty());
    if (key) {
        assert(key->empty());
        *key = it->first;
    }
    auto &tbuckets = it->second;
    auto it2 = tbuckets.iter_random();
    auto &tbucket = it2->second;
    
    Entry result = pop_bucket<Entry,Bucket<Entry>>(tbucket, this->queue_type);
    if (tbucket.empty()){
        tbuckets.erase(it2);
    }
    if (tbuckets.empty()){
        buckets.erase(it);
    }
    return result;
}

template<class Entry>
bool TypedTiebreakingOpenList<Entry>::is_dead_end(
    EvaluationContext &eval_context) const {
    if (!this->evaluators.empty()){
        return TieBreakingOpenList<Entry>::is_dead_end(eval_context);
    } else {
        return false;
    }
}

    

TypedTiebreakingOpenListFactory::TypedTiebreakingOpenListFactory(const Options &options)
    : options(options) {
}

unique_ptr<StateOpenList>
TypedTiebreakingOpenListFactory::create_state_open_list() {
    return Utils::make_unique_ptr<TypedTiebreakingOpenList<StateOpenListEntry>>(options);
}

unique_ptr<EdgeOpenList>
TypedTiebreakingOpenListFactory::create_edge_open_list() {
    return Utils::make_unique_ptr<TypedTiebreakingOpenList<EdgeOpenListEntry>>(options);
}

static shared_ptr<OpenListFactory> _parse(OptionParser &parser) {
    parser.document_synopsis("Tie-breaking open list", "");
    parser.add_list_option<ScalarEvaluator *>("evals",
                                              "scalar evaluators."
                                              "Results are sorted according to the dictionary order,"
                                              "preferring smaller numbers."
                                              "After ties are broken, there are further buckets based on type_evals, and a bucket is selected at random.");
    parser.add_list_option<ScalarEvaluator *>("type_evals", "scalar evaluators. "
                                              "Used to form the buckets which are selected randomly.");
    add_queue_type_option_to_parser(parser);
    parser.add_option<bool>(
        "pref_only",
        "insert only nodes generated by preferred operators", "false");
    parser.add_option<bool>(
        "unsafe_pruning",
        "allow unsafe pruning when the main evaluator regards a state a dead end",
        "true");
    Options opts = parser.parse();
    // opts.verify_list_non_empty<ScalarEvaluator *>("evals");
    if (!opts.is_help_mode()){
        auto evals = opts.get<std::vector<ScalarEvaluator *>>("evals");
        auto type_evals = opts.get<std::vector<ScalarEvaluator *>>("type_evals");
        if (evals.empty() && type_evals.empty()){
            std::cout << "Error: unexpected empty list!" << std::endl
                      << "Both evals and type_evals are empty" << std::endl;
            Utils::exit_with(Utils::ExitCode::INPUT_ERROR);
        }
    }

    if (parser.dry_run())
        return nullptr;
    else
        return make_shared<TypedTiebreakingOpenListFactory>(opts);
}

static PluginShared<OpenListFactory> _plugin("typed_tiebreaking", _parse);
